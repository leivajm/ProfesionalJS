{"id":"ejercicios/generadores.html","dependencies":[{"name":"C:\\Progra\\Profesional_JS\\package.json","includedInParent":true,"mtime":1603398599269}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Generadores</title>\r\n</head>\r\n<body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <script>//Los generadores son funciones de las que se puede salir\n//y volver a entrar\n//Su contexto (asociaci칩n de variables) ser치 conservado\n//entre las reentradas\n//Cada vez que llama al next, la ejecuci칩n del generador va a\n//continuar hasta el proximo yield\nfunction* simpleGenerator() {\n  console.log(\"GENERATOR START\"); //ceder\n\n  yield 1;\n  yield 2;\n  yield 3;\n  console.log(\"GENERATOR END\");\n} //const gen = simpleGenerator()\n//podemos hacer generadores infinitos\n\n\nfunction* idMaker() {\n  let id = 1;\n\n  while (true) {\n    yield id;\n    id = id + 1;\n  }\n} //cuando llamamos next tambien podemos pasar valores \n//que la funcion recibe\n\n\nfunction* idMakerWithReset() {\n  let id = 1;\n  let reset;\n\n  while (true) {\n    reset = yield id;\n\n    if (reset) {\n      id = 1;\n    } else {\n      id = id + 1;\n    }\n  }\n} //ahora escribimos un ejemplo m치s complejo: la secuencia fibonacci\n\n\nfunction* fibonacci() {\n  let a = 1;\n  let b = 1;\n\n  while (true) {\n    const nextNumber = a + b;\n    a = b;\n    b = nextNumber;\n    yield nextNumber;\n  }\n}</script>\r\n    \r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"2d329ae8d005e4248357c41ba75ca6f8","cacheData":{"env":{}}}