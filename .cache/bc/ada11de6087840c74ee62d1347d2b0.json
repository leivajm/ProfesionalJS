{"id":"ejercicios/prototype.html","dependencies":[{"name":"C:\\Progra\\Profesional_JS\\package.json","includedInParent":true,"mtime":1603398599269}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Prototype</title>\r\n</head>\r\n<body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n    <script>//un objeto comun y corriente\n// const zelda = {\n//     name: \"zelda\"\n// }\n// zelda.saludar = function(){\n//     console.log(`Hola soy ${this.name}`);\n// };\n// zelda.saludar();\n// const link = {\n//     name: \"Link\"\n// }\n// link.saludar = function(){\n//     console.log(`Hola soy ${this.name}`);\n// };\n// link.saludar();\n//     function Hero (name){\n//         const hero = {\n//             name: name\n//         }\n//         hero.saludar = function(){\n//             console.log(`Hola soy ${this.name}`);\n//         };\n//         return hero;\n//     }\n// zelda = new Hero(\"Zelda\")\n// zelda.saludar();\n// link = new Hero(\"Link\")\n// link.saludar();\n//mejorarmos el código evitando crear la misma funcion cada vez\n//     const heroMethods = {\n//         saludar: function(){\n//             console.log(`Me llamo ${this.name}`);\n//         },\n//     }\n// function Hero (name){\n//         const hero = {\n//             name: name\n//         }\n//         hero.saludar = heroMethods.saludar;\n//         return hero;\n//     }\n// zelda = new Hero(\"Zelda\")\n// zelda.saludar();\n// link = new Hero(\"Link\")\n// link.saludar();\n//Object.create\n//recibe un objeto y crea un nuevo objeto con todas las props\n//que tiene definido el objeto que se traslada\n// pasa al apartado __proto__ (herencia prototipal)\n// const heroMethods = {\n//         saludar: function(){\n//             console.log(`Me llamo ${this.name}`);\n//         },\n//     }\n// function Hero (name){\n//         const hero = Object.create(heroMethods)\n//         hero.name = name;\n//         return hero;\n//     }\n// zelda = new Hero(\"Zelda\")\n// zelda.saludar();\n// link = new Hero(\"Link\")\n// link.saludar();\n//los metodos de hero dentro de hero\n// const heroMethods = {\n//         saludar: function(){\n//             console.log(`Me llamo ${this.name}`);\n//         },\n//     };\n// \n//new es un atajo (azúcar sintáctica) para llevar Hero.prototype\n//al objeto\nfunction Hero(name) {\n  //new realiza la siguiente linea de forma autómatica\n  //const hero = Object.create(Hero.prototype)\n  //esto equivale a\n  //this = Object.create(Hero.prototype)\n  //esto lo realiza autómaticamente JS\n  this.name = name; //el return ocurre implicitamente, no hay que hacerlo\n  //return this;\n}\n\nHero.prototype.saludar = function () {\n  console.log(`New:  ${this.name}`);\n};\n\nzelda = new Hero(\"Zelda\");\nzelda.saludar();\nlink = new Hero(\"Link\");\nlink.saludar();</script>\r\n    \r\n    \r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"8ae09651e005535c78e640d0b1a429db","cacheData":{"env":{}}}